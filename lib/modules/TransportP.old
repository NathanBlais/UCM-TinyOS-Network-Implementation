//      Author:Nathan Blais
//Date Created:2020-03-21

#include "../../includes/packet.h"
#include "../../includes/channels.h"
#include "../../includes/am_types.h"
#include "../../includes/command.h"
#include "../../includes/CommandMsg.h"
#include "../../includes/sendInfo.h"
#include "../../includes/socket.h"
#include "Timer.h"

module TransportP{
  provides interface Transport;

  //Uses the SimpleSend interface to transport data recieved packet
  uses interface SimpleSend as Sender;
  //Uses the Receive interface to receive packets 
//  uses interface Receive as Receiver;
//  uses interface AMPacket;
  
  //Uses the (DVR) interface to know where to forward packets.
  uses interface DistanceVectorRouting;

  uses interface Hashmap<socket_store_t> as Connections; // hash table: list of connections

  uses interface LocalTime<TMilli>;
  // uses interface Timer<TMilli> as sendPacketTimer;
  // uses interface Timer<TMilli> as sendDataTimer;

  uses interface Queue<pack*>;
  uses interface Pool<pack>;
  //uses interface SendQueue<sendTCPInfo*> as SendQueue;
  //uses interface SendPool<pack> as SendPool;

 }

 implementation{

    // Globals

    const socket_t NULLSocket = 0;
    uint8_t *Empty;
    uint16_t ipSeq = 1;

    // Prototypes

    error_t sendData();
    void sendDataDone(error_t err);

    error_t sendPacket();
    void sendPacketDone(error_t err);

    void makeTCPpack(tcpHeader *Package, uint8_t src, uint8_t dest, uint8_t flag, uint8_t seq, uint8_t ack, uint8_t ad_win, uint8_t* payload, uint8_t length);
    void makeIPpack(pack *Package, tcpHeader  *myTCPpack, socket_store_t *sock, uint8_t length);
    error_t receive(pack* package);
    //void send(socket_t socKey, uint8_t flag, uint8_t* payload, uint8_t length);
    //error_t sendDone(socket_t socKey, uint8_t flag, uint8_t* payload, uint8_t length);
    error_t send(socket_t socKey, uint8_t flag, uint8_t seq, uint8_t ack, uint8_t* payload, uint8_t length);

    void printTCP(tcpHeader *Package){
      dbg(TRANSPORT_CHANNEL, "printTCP Called\n");
      dbg(TRANSPORT_CHANNEL, "\tuint8_t Src_Port = %d\n\t\t\t\tuint8_t Dest_Port = %d\n",Package->Src_Port,Package->Dest_Port);
      dbg(TRANSPORT_CHANNEL, "\tuint8_t Seq_Num = %d\n\t\t\t\tuint8_t Acknowledgment = %d\n",Package->Seq_Num,Package->Acknowledgment);
      dbg(TRANSPORT_CHANNEL, "\tuint8_t Len = %d\n\t\t\t\tuint8_t Flags = %d\n",Package->Len,Package->Flags);
      dbg(TRANSPORT_CHANNEL, "\tuint8_t Advertised_Window = %d\n\t\t\t\tuint8_t payload = %s\n",Package->Advertised_Window,Package->payload);
    }

    void printSocket(socket_t fd){
      socket_store_t * socketHolder;
      if (!(call Connections.contains(fd))) return;
      socketHolder = call Connections.getPointer(fd);

      dbg(TRANSPORT_CHANNEL, "printSocket for %d Called\n",fd);

      dbg(TRANSPORT_CHANNEL, "\tsocket_addr_t dest.addr = %d\n\t\t\t\tsocket_addr_t dest.port = %d\n",socketHolder->dest.addr,socketHolder->dest.port);
      dbg(TRANSPORT_CHANNEL, "\tsocket_state state = %d\n\t\t\t\tsendBuff = %s\n",socketHolder->state,socketHolder->sendBuff);
      dbg(TRANSPORT_CHANNEL, "\tlastWritten = %d\n\t\t\t\tlastSent = %d\n",socketHolder->lastWritten,socketHolder->lastSent);
      dbg(TRANSPORT_CHANNEL, "\tlastAck = %d\n\t\t\t\tnextSend = %d\n",socketHolder->lastAck,socketHolder->nextSend);
      dbg(TRANSPORT_CHANNEL, "\tlastRead= %d\n\t\t\t\trcvdBuff = %s\n",socketHolder->lastRead,socketHolder->rcvdBuff);
      dbg(TRANSPORT_CHANNEL, "\tnextExpected = %d\n\t\t\t\tlastRcvd = %d\n",socketHolder->nextExpected,socketHolder->lastRcvd);
      dbg(TRANSPORT_CHANNEL, "\teffectiveWindow = %d\n\t\t\t\tTTD = %d\n",socketHolder->effectiveWindow,socketHolder->TTD);
      dbg(TRANSPORT_CHANNEL, "\tRTT = %d\n",socketHolder->RTT);
      dbg(TRANSPORT_CHANNEL, "\tlastTimeSent = %d\n\t\t\t\tlastTimeRecived = %d\n",socketHolder->lastTimeSent,socketHolder->lastTimeRecived);
    }

  command socket_t Transport.socket(socket_t fd){
    dbg(TRANSPORT_CHANNEL,"Transport.socket() Called\n");
    if(call Connections.contains(0)) { //if there is room
      if(!(call Connections.contains(fd))) 
        return fd;
      else{
        dbg(TRANSPORT_CHANNEL,"Failed: port %d is not available\n", fd);
        return NULLSocket;
      }
    }
    dbg(TRANSPORT_CHANNEL,"Failed: No sockets are available\n");
    return NULLSocket;
  }

  command error_t Transport.bind(socket_t fd, socket_addr_t *addr){
    socket_store_t TCB;    //Transmission Control Block
    uint8_t i = 0;
    //Checkers 
    if(fd == 0 || fd > MAX_NUM_OF_SOCKETS){
      dbg(TRANSPORT_CHANNEL,"Socket:%d is not valid. Try number: 1-10\n", fd);
      return FAIL;
    }
    if(addr->addr == 0 || addr->addr > MAX_ROUTES){
      dbg(TRANSPORT_CHANNEL,"adress :%d is not valid. Try number: 1-10\n", addr->addr);
      return FAIL;
    }
    if(call Connections.contains(fd)){ //Checks if the Socket is already in use
      dbg(TRANSPORT_CHANNEL,"Socket:%d is already bound\n", fd);
      return FAIL;
    }

    dbg(TRANSPORT_CHANNEL,"Transport.bind() Called\n");
    TCB.src = fd;
    TCB.dest = *addr;
    TCB.state = CLOSED;
    // This is the sender portion.
    TCB.lastWritten = i;
    TCB.lastAck = i;
    TCB.lastSent = 1;

    TCB.RTT = 60000;  //NOTE:We Need to replace this value
    TCB.effectiveWindow = 1;  //NOTE:We Need to replace this value

    TCB.lastTimeRecived = 60000;
    TCB.lastTimeSent = 0;

    //Add call to set up Sliding Window

    call Connections.insert(fd, TCB);
    if(call Connections.contains(fd)){
      dbg(TRANSPORT_CHANNEL,"Socket:%d bound to Node:%d Port:%d\n", fd, addr->addr, addr->port);
      return SUCCESS;
    }
    else {
      dbg(TRANSPORT_CHANNEL,"Socket:%d bound to Node:%d Port:%d has FAILED\n", fd, addr->addr, addr->port);
      return FAIL;
    }
  }

  command socket_t Transport.accept(socket_t fd, pack* myPacket){
    socket_store_t * socketHolder;
    uint8_t iss;
    tcpHeader * myTcpHeader = (tcpHeader*) myPacket->payload;
    if (!(call Connections.contains(fd))) return FAIL;

    socketHolder = call Connections.getPointer(fd);
    switch (socketHolder->state) { 
      case LISTEN:
      default:
        //Update Socket
        socketHolder->dest.port= myTcpHeader->Src_Port;
        socketHolder->dest.addr= myPacket->src;

        socketHolder->lastRcvd = myTcpHeader->Seq_Num; //for stop and wait


        //socketHolder->nextExpected = myTcpHeader->Seq_Num + 1;
        //socketHolder->lastRcvd = myTcpHeader->Seq_Num;

        //Choose and ISS
        iss = 0;

        socketHolder->RTT = call LocalTime.get() + 1000000;
        socketHolder->lastTimeSent = call LocalTime.get();

        send(fd, SYN+ACK, iss, socketHolder->nextExpected, Empty, 0);
        socketHolder->state = SYN_RCVD;
        socketHolder->nextSend = iss + 1;
        //socketHolder->lastSent = iss; //done in sender
        break;
    }
    return fd;
  }

  command uint16_t Transport.write(socket_t fd, uint8_t *buff, uint16_t bufflen){
      socket_store_t * curSocket = call Connections.getPointer(fd);
      uint8_t written;

    dbg(TRANSPORT_CHANNEL,"Transport.write() Called\n");
    if (buff == NULL || bufflen < 1) return 0;
    if (!(call Connections.contains(fd))) return 0;

    

    //NOTE: this will not work if you try to write too much information back to back
    //for that we need to get the amount of info already on the buffer and make that the
    // max amount you can write instead.
    if (bufflen > SOCKET_BUFFER_SIZE){
      written = SOCKET_BUFFER_SIZE - bufflen;
    }
    else{
      written = bufflen;
    }
    memcpy((curSocket->sendBuff), buff, written);
    dbg(TRANSPORT_CHANNEL, "Message to send is %s\n", curSocket->sendBuff);

    call sendDataTimer.startPeriodic(81000); //could be set to a diffrent number
    return written;
  }

  task void receiveBufferTask(){
       // If we have a values in our queue and the radio is not busy, then
       // attempt to send a packet.
        if(!call Queue.empty()){
         pack *info;
         // We are peeking since, there is a possibility that the value will not
         // be successfuly sent and we would like to continue to attempt to send
         // it until we are successful. There is no limit on how many attempts
         // can be made.
         info = call Queue.head();

         // Attempt to send it.
            if(SUCCESS == receive(info)){
                //Release resources used if the attempt was successful
                call Queue.dequeue();
                call Pool.put(info);
            }
        }
  }

  command error_t Transport.receive(pack* package){
    if(!call Pool.empty()){
      pack *input;
      input = call Pool.get();
      memcpy(input, package, PACKET_MAX_PAYLOAD_SIZE);

      // Now that we have a value from the pool we can put it into our queue.
      // This is a FIFO queue.
      call Queue.enqueue(input);

      // Start a send task which will be delayed.
      post receiveBufferTask();

      return SUCCESS;
    }
    return FAIL;
  }

  error_t receive(pack* package)
  {
    pack* myMsg=(pack*) package;
      tcpHeader* mySegment = (tcpHeader*) myMsg->payload;
      socket_store_t * curConection = call Connections.getPointer(mySegment->Dest_Port);

      dbg(TRANSPORT_CHANNEL, "Transport.receive() Called\n");
      dbg(TRANSPORT_CHANNEL, "STATE: %d | FLAG: %d\n", curConection->state, mySegment->Flags);

     // printTCP(mySegment);
     // printSocket(mySegment->Dest_Port);


      // dbg(TRANSPORT_CHANNEL, "INCOMING SEQ #: %d\n",mySegment->Seq_Num );
      // dbg(TRANSPORT_CHANNEL, "Current EXPECTED #: %d\n",curConection->nextExpected );

      // //TO_DO: add check here to see if the packet has been seen before

      // if(curConection->LastRecivedIPpack.src == myMsg->src &&
      //    curConection->LastRecivedIPpack.seq == myMsg->seq)  {
      //       dbg(TRANSPORT_CHANNEL, "Recived Duplicate packet\n");
      //       return FAIL;
      // }

      // if(curConection->state & (LISTEN | SYN_SENT)){
      //   curConection->nextExpected = mySegment->Seq_Num;
      //   dbg(TRANSPORT_CHANNEL, "Changed nextExpected # to: %d\n",curConection->nextExpected);
      // }

      // dbg(TRANSPORT_CHANNEL, "Check nextExpected #: %d\n",curConection->nextExpected);

      // if(curConection->nextExpected != mySegment->Seq_Num){
      //   dbg(TRANSPORT_CHANNEL, "Recived packet with unexpected SEQ #\n");
      //   return FAIL;
      // }

      // if(curConection->lastSent != mySegment->Acknowledgment){
      //   dbg(TRANSPORT_CHANNEL, "Recived packet with unexpected SEQ #\n");
      //   return FAIL;
      // }

      // //put some checks here

      // //We should update lastRcvd here; 
      // curConection->lastRcvd = mySegment->Seq_Num;
      // curConection->lastAck = mySegment->Acknowledgment;

      // //update LastRecivedIPpack

      // //ass next expected

      // curConection->LastRecivedIPpack = *myMsg;

      // curConection->lastTimeRecived = call LocalTime.get();

      //make sure only the sender is updating their   curConection->effectiveWindow



      switch (curConection->state) {
        case CLOSED: //Don't know what do do with it yet
          dbg(TRANSPORT_CHANNEL, "State is Closed\n");
          //Acording to RFC - 793:
          //An incoming segment not containing a RST causes a RST to be sent in response. 
          //^ we will ignore this
          return FAIL;
          break;  
        case LISTEN:
          if(mySegment->Flags == RESET){/*ignore*/}
          else if(mySegment->Flags == ACK){/* Can't have ACK send Pack:<SEQ=SEG.ACK><CTL=RST>*/}
          else if(mySegment->Flags == SYN){
            call Transport.accept(curConection->src, myMsg);
            return SUCCESS;
          }
          else{ //Wrong info
            return FAIL;
          }
          break; 
        case SYN_SENT:
            //put some checks here
          if(mySegment->Flags & ( SYN | ACK )) {
            dbg(TRANSPORT_CHANNEL, "curConection->lastSent %d < mySegment->Acknowledgment %d\n", curConection->lastSent, mySegment->Acknowledgment);

          //   if(curConection->lastSent < mySegment->Acknowledgment &&
          //     mySegment->Acknowledgment <= curConection->nextSend)
          //  {
          //       dbg(TRANSPORT_CHANNEL, "Is this enterd??\n", curConection->state, mySegment->Flags);

               curConection->nextExpected = mySegment->Seq_Num + 1; 
               curConection->lastRcvd = mySegment->Seq_Num;
               curConection->lastAck = mySegment->Acknowledgment;
               //any segments on the retransmission queue which are thereby acknowledged should be removed.
            //if(curConection->lastSent > curConection->lastRcvd){
              dbg(TRANSPORT_CHANNEL, "STATE: SYN_SENT -> ESTABLISHED\n");
              curConection->state = ESTABLISHED;
              send(curConection->src, ACK, curConection->nextSend, curConection->nextExpected, Empty, 0);
           // }

            //Set the variables:
            // SND.WND <- SEG.WND
            // SND.WL1 <- SEG.SEQ
            // SND.WL2 <- SEG.ACK
            
            curConection->effectiveWindow = mySegment->Advertised_Window;

            //TO_DO:call to start sending packets from que.
            return SUCCESS;
          }
          else return FAIL;
          break; 

          ///new bits
      }

      //check sequence number HERE

      switch (curConection->state) {

      case LAST_ACK:
        if(mySegment->Flags == ACK && curConection->nextExpected == mySegment->Seq_Num){
          curConection->state=CLOSED;
          dbg(TRANSPORT_CHANNEL, "CLOSED FROM CASE LAST ACK AND STATE ACK \n");
          break;
        }
        goto  FIN_WAIT_1_J;               
      case SYN_RCVD:
          //put some checks here
        if(mySegment->Flags & ( SYN | ACK )) {
          curConection->state = ESTABLISHED;
          
          send(curConection->src, ACK, curConection->nextSend, curConection->nextExpected, Empty, 0); //update this
          return SUCCESS;
        }
        else return FAIL;
        break; 

      case CLOSE_WAIT:
        if(mySegment->Flags == ACK){
          curConection-> state = CLOSED;
          return SUCCESS;
        }
      case FIN_WAIT_1:
      FIN_WAIT_1_J:
        if(mySegment->Flags == ACK){
          curConection ->state = FIN_WAIT_2;
          return SUCCESS;
        }
      case FIN_WAIT_2:
        if(mySegment->Flags == FIN){
          curConection-> state = TIME_WAIT;
          send(curConection->src, ACK, curConection->nextSend, curConection->nextExpected, Empty, 0); //update this

          //set a timer that eventually closes the socket
          return SUCCESS;
        }
      case ESTABLISHED:
      ESTABLISHED_J:
        if(mySegment->Flags == ACK){
          if(mySegment->Len == 0){ //this is a normal ack pack
            //update socket
            //stop resend for data
          }
          else{ // has data   //Only need to ipmlement this if you send more than one packet of data       
            //update socket
            call Transport.read(curConection->src, mySegment, mySegment->Len);

            //make ack packet
            //store pack for resend
            //send back an ack packet
          }
        }
        else if(mySegment->Flags == PUSH){
          dbg(TRANSPORT_CHANNEL, "Message Recived:%s\n",mySegment->payload);

          call Transport.read(curConection->src, mySegment, mySegment->Len);
          //print out entire buffer
          dbg(TRANSPORT_CHANNEL, "\tFinished reciving Message\n");
          dbg(TRANSPORT_CHANNEL, "\t\tMessage:%s\n",curConection->rcvdBuff);

          send(curConection->src, ACK, curConection->nextSend, curConection->nextExpected, Empty, 0); //update this
          return SUCCESS;
        }
        else if(mySegment->Flags == FIN){
          curConection-> state = CLOSE_WAIT;

          send(curConection->src, ACK, curConection->nextSend, curConection->nextExpected, Empty, 0); //update this

          //call timer first or after?
          call Transport.close(curConection->src); 
          //timer? or command most likey command
        }
        else if(mySegment->Flags == RESET){}
        else if(mySegment->Flags == URG){}
        else return FAIL;
        break; 
      case TIME_WAIT:
        if(mySegment->Flags == URG){}
        if(mySegment->Flags == ACK){}
        if(mySegment->Flags == PUSH){}
        if(mySegment->Flags == RESET){}
        if(mySegment->Flags == SYN){}
        if(mySegment->Flags == FIN){}
        break; 

      default:
          dbg(TRANSPORT_CHANNEL, "FLAG_ERROR: \"%d\" does not match any known commands.\n", mySegment->Flags);
          return FAIL;
          break;
      }
      return FAIL;
  }

   /**
    * Read from the socket and write this data to the buffer. This data
    * is obtained from your TCP implimentation.
    * @param
    *    socket_t fd: file descriptor that is associated with the socket
    *       that is attempting a read.
    * @param
    *    uint8_t *buff: the buffer that is being written.
    * @param
    *    uint16_t bufflen: the amount of data that can be written to the
    *       buffer.
    * @Side For your project, only server side. This could be both though.
    * @return uint16_t - return the amount of data you are able to read
    *    from the pass buffer. This may be shorter then bufflen
    */
  command uint16_t Transport.read(socket_t fd, tcpHeader *tcpSegment, uint16_t bufflen)
  {
    uint8_t buffSize;
    socket_store_t * socketHolder =  call Connections.getPointer(fd);
    uint8_t *buff = tcpSegment->payload;

    dbg(TRANSPORT_CHANNEL, "Transport Called Read\n");
    for(buffSize=0; socketHolder->sendBuff[buffSize] != '\0'; buffSize++ ){} //calculates the size of the buffer

    strcat((socketHolder->rcvdBuff), buff);

    if (socketHolder->lastRead == 0) {socketHolder->lastRead = 1;}
    else{socketHolder->lastRead = 0;}
    // if (socketHolder->nextExpected == 0) {socketHolder->nextExpected = 1;}
    // else{socketHolder->nextExpected = 0;}

    return 1; // for warning
  }

  // mask a task for this
  command error_t Transport.connect(socket_t fd, socket_addr_t * addr)
  {
    socket_store_t * socketHolder ;
    uint8_t inSeq = 0; //choose inital sequence number
    if (!(call Connections.contains(fd))) return FAIL;
    socketHolder = call Connections.getPointer(fd);
    switch (socketHolder->state)
    { 
      case CLOSED: 
        socketHolder->state = SYN_SENT; //Change the state of the socket
        send(fd, SYN, inSeq, 0, Empty, 0);
        //socketHolder->lastSent = inSeq;
        return SUCCESS;
        break;  
      case LISTEN:
        dbg(TRANSPORT_CHANNEL,"Socket is already listening\n");
        return FAIL;
        break;
      default:
          dbg(TRANSPORT_CHANNEL, "WRONG_STATE_ERROR: \"%d\" is an incompatable state or does not match any known states.\n", socketHolder->state);
          return FAIL;
          break;
    }
  }

  /**
    * Closes the socket.
    * @param
    *    socket_t fd: file descriptor that is associated with the socket
    *       that you are closing. 
    * @side Client/Server
    * @return socket_t - returns SUCCESS if you are able to attempt
    *    a closure with the fd passed, else return FAIL.
    */
  command error_t Transport.close(socket_t fd)
  {
      socket_store_t * mySocket;
      dbg(TRANSPORT_CHANNEL, "Called Transport.close()\n");
      
      if (!(call Connections.contains(fd))) return FAIL;

      mySocket = call Connections.getPointer(fd);

      switch (mySocket->state){
        case CLOSED:
          dbg(TRANSPORT_CHANNEL, "Already closed \n");
          return FAIL;
          break;
        case LISTEN: case SYN_SENT:
          mySocket->state = CLOSED;
          dbg(TRANSPORT_CHANNEL, "Socket State: (LISTEN | SYN_SENT) -> CLOSED\n");
          return SUCCESS;
          break;
        case ESTABLISHED: //Starts the close
        //sudo Code:
          //Set state
          //Send packet
          //Set timmer

          mySocket->state = FIN_WAIT_1;
          // mySocket->dest.port= myTcpHeader->Src_Port; //ask if necessary
          // mySocket->dest.addr= myPacket->src; //ask if necessary
          send(fd, FIN, mySocket->nextSend, mySocket->nextExpected, Empty, 0); //update this

          return SUCCESS;
          break;
        //make timer that checks if the packets of the payload are done sending, wait APP, research to know when it's done, timer or a command
        case CLOSE_WAIT: //changes wait to FIN WAIT 2 flag fin
        //sudo Code:
          //Set state
          //Send packet
          //Set timmer
          dbg(TRANSPORT_CHANNEL, "In close CLOSE_WAIT \n");
          mySocket-> state = LAST_ACK;

          send(fd, FIN, mySocket->nextSend, mySocket->nextExpected, Empty, 0); //update this
          return SUCCESS;
          break;
        default:
        dbg(TRANSPORT_CHANNEL, "WRONG_STATE_ERROR: \"%d\" is an incompatable state or does not match any known states.\n", mySocket->state);
          return FAIL;
          break;
      }
  }

   /**
    * A hard close, which is not graceful. This portion is optional.
    * @param
    *    socket_t fd: file descriptor that is associated with the socket
    *       that you are hard closing. 
    * @side Client/Server
    * @return socket_t - returns SUCCESS if you are able to attempt
    *    a closure with the fd passed, else return FAIL.
    */
   //command error_t Transport.release(socket_t fd);

  command error_t Transport.listen(socket_t fd)
  {
    socket_store_t * socketHolder ;
    if (!(call Connections.contains(fd))) return FAIL;
    socketHolder = call Connections.getPointer(fd);
    if(socketHolder->state == LISTEN){
      dbg(TRANSPORT_CHANNEL,"Socket is already listening\n");
      return FAIL;
    }
    else{
      dbg (TRANSPORT_CHANNEL, "Change Socket State from %d to Listen:%d\n",socketHolder->state, LISTEN);
      socketHolder->state = LISTEN;
      return SUCCESS;
    }
  }

  event void sendDataTimer.fired()
  {
    sendData();
  }

  void sendDataDone(error_t err)
  {
    if(err == SUCCESS){
      socket_store_t * socketHolder;
      tcpHeader sendPackageTCP;
      pack sendIPpackage;
      uint8_t TempSendBuff[SOCKET_BUFFER_SIZE];
      uint8_t buffSize, sendSize, TCPflag, i;
      uint8_t size = call Connections.size();
      uint32_t * keys = call Connections.getKeys();

      for(i=0;i<size;i++){
        socketHolder = call Connections.getPointer(keys[i]);
        if(socketHolder->sendBuff[0] != 0){
          i = 0;
          break;
        }
      }

      if(size == 0 || i == size ){
        dbg(TRANSPORT_CHANNEL,"Data Timer Stoped\n");
        call sendDataTimer.stop();
        return;
      }

      dbg(TRANSPORT_CHANNEL," ATTEMPTING TO SEND DATA\n");
      for(i=0;i<size;i++){
        socketHolder = call Connections.getPointer(keys[i]);
        dbg(TRANSPORT_CHANNEL,"keys[i]: %d\n", keys[i]);
        dbg(TRANSPORT_CHANNEL," How many times in the loop: %d\n", i);

        dbg(TRANSPORT_CHANNEL,"socketHolder->lastSent: %d | socketHolder->lastAck %d\n",socketHolder->lastSent,socketHolder->lastAck );
        
        dbg(TRANSPORT_CHANNEL,"socketHolder->sendBuff %s\n",socketHolder->sendBuff );

        // if((socketHolder->state & (ESTABLISHED | FIN_WAIT_2) )&&
        //   socketHolder->lastSent == socketHolder->lastAck &&
        //   socketHolder->sendBuff != '\0')
        //   { //if true send data
                dbg(TRANSPORT_CHANNEL," Does it enter here?\n");
          for(buffSize=0; socketHolder->sendBuff[buffSize] != '\0'; buffSize++ ){} //calculates the size of the buffer
          if(buffSize > TCP_PACKET_MAX_PAYLOAD_SIZE){//if size of buffer is > TCP_PACKET_MAX_PAYLOAD_SIZE
            sendSize = TCP_PACKET_MAX_PAYLOAD_SIZE;
            TCPflag = ACK;
          }  
          else { //send normaly with PUSH flag <- let it know it is the end of the data send
            sendSize = buffSize;
            TCPflag = PUSH;
          }
          send(i, TCPflag, socketHolder->nextSend, socketHolder->nextExpected, socketHolder->sendBuff, sendSize); //update this
         
          socketHolder->lastSent = inSeq;


          //edit buffer
          if(buffSize > TCP_PACKET_MAX_PAYLOAD_SIZE){
          memcpy(TempSendBuff, &((socketHolder->sendBuff)[sendSize]), buffSize - sendSize);
          dbg(TRANSPORT_CHANNEL," TempSendBuff: %s\n",TempSendBuff);
          }
          else{
            for (i = 0; i < SOCKET_BUFFER_SIZE; i++){ //I don't know if I need to fill this
              socketHolder->sendBuff[i] = 0;
              }
          }
        //}
      }
    }
  }//end of: void sendDataDone(error_t err)

  task void sendDataTask()
  {

    sendDataDone(SUCCESS);
  }

  error_t sendData()
  {
    post sendDataTask();
    return SUCCESS;
  }

  event void sendPacketTimer.fired()
  {
    sendPacket();
  }
  void sendPacketDone(error_t err){ //assuming that this is for stop and wait.
    uint8_t i;
    if(err == FAIL){
      return;
    }
    for(i = 0; i < MAX_NUM_OF_SOCKETS; i++) {
      if((call Connections.getPointer(i))->TTD < (call LocalTime.get())){//if true either reset or close the connnection
          //Fill in here
          return;
      }
      if((call Connections.getPointer(i))->RTT < call LocalTime.get() && (call Connections.getPointer(i))->lastSent != (call Connections.getPointer(i))->lastAck) { //if TRUE retransmit
          dbg(TRANSPORT_CHANNEL, "Retransmitting\n");
          call Sender.send((call Connections.getPointer(i))->LastSentIPpack, call DistanceVectorRouting.GetNextHop((call Connections.getPointer(i))->dest.addr));
      }
    }
  }//end of: void sendPacketDone(error_t err)

  task void sendPackeTask()
  {

    sendPacketDone(SUCCESS);
  }
  error_t sendPacket()
  {
    post sendDataTask();
    return SUCCESS;
  }

  //error_t sendDone(socket_t socKey, uint8_t flag, uint8_t* payload, uint8_t length)
  error_t send(socket_t socKey, uint8_t flag, uint8_t seq, uint8_t ack, uint8_t* payload, uint8_t length)
  {

      tcpHeader sendPackageTCP;
      pack sendIPpackage;
      socket_store_t * socketHolder = call Connections.getPointer(socKey);

      dbg(TRANSPORT_CHANNEL,"error_t send Called\n");

      switch (socketHolder->state)
    { 
      case CLOSED: 
        dbg(TRANSPORT_CHANNEL,"error:  connection does not exist\n");
        return FAIL;
        break;  
      default:
          //dbg(TRANSPORT_CHANNEL, "WRONG_STATE_ERROR: \"%d\" is an incompatable state or does not match any known states.\n", socketHolder->state);
          //return FAIL;
          break;
    }


      /*Make the TCP Packet*/

      sendPackageTCP.Src_Port = socketHolder->src;
      sendPackageTCP.Dest_Port = socketHolder->dest.port;
      sendPackageTCP.Flags = flag;
      sendPackageTCP.Seq_Num = seq;
      sendPackageTCP.Acknowledgment = ack;
      sendPackageTCP.Len = length;
      sendPackageTCP.Advertised_Window = socketHolder->effectiveWindow;
      memcpy(sendPackageTCP.payload, payload, length);

      /*END OF: Make the TCP Packet*/

      makeIPpack(&sendIPpackage, &sendPackageTCP, socketHolder, PACKET_MAX_PAYLOAD_SIZE); //maybe reduce the PACKET_MAX_PAYLOAD_SIZE
      ipSeq = ipSeq + 1;

      call Sender.send(sendIPpackage, call DistanceVectorRouting.GetNextHop(socketHolder->dest.addr));

      //update socket -------------------------------------------
       socketHolder->lastSent = sendPackageTCP.Seq_Num;

      // if (socketHolder->lastSent == 0) {socketHolder->nextExpected = 0;}
      // else{socketHolder->nextExpected = 1;}    

      //save a copy of the packet to be re-sent by a timmer and set RTT & TTD lastTimeSent
      socketHolder->RTT = (socketHolder->lastTimeRecived - socketHolder->lastTimeSent) + call LocalTime.get() + 300;
      socketHolder->TTD = (socketHolder->RTT) * 3;
      return SUCCESS;

    }
    
  //   task void sendTask(){
  //     // If we have a values in our queue and the radio is not busy, then
  //     // attempt to send a packet.
  //       if(!call SendQueue.empty()){
  //        sendTCPInfo *info;
  //        // We are peeking since, there is a possibility that the value will not
  //        // be successfuly sent and we would like to continue to attempt to send
  //        // it until we are successful. There is no limit on how many attempts
  //        // can be made.
  //        info = call SendQueue.head();

  //        // Attempt to send it.
  //           if(SUCCESS == sendDone(info->socKey,info->flag,&(info->payload), info->length)){
  //               //Release resources used if the attempt was successful
  //               call SendQueue.dequeue();
  //               call SendPool.put(info);
  //           }
  //       }
  //  }


    // void send(socket_t socKey, uint8_t flag, uint8_t* payload, uint8_t length){
    //        if(!call SendPool.empty()){
    //         sendTCPInfo *input;

    //         input = call SendPool.get();
    //         input->socKey = socKey;
    //         input->flag = flag;
    //         memcpy(&(input->payload), payload, PACKET_MAX_PAYLOAD_SIZE);
    //         input->length = length;

    //         // Now that we have a value from the pool we can put it into our queue.
    //         // This is a FIFO queue.
    //         call SendQueue.enqueue(input);

    //         // Start a send task which will be delayed.
    //         post sendTask();
    //     }
    // }

  void makeIPpack(pack *Package, tcpHeader *myTCPpack, socket_store_t *sock, uint8_t length){
    Package->src = (uint16_t)TOS_NODE_ID;
    Package->dest = sock->dest.addr;
    Package->TTL = MAX_TTL;
    Package->seq = ipSeq; //finish this
    Package->protocol = PROTOCOL_TCP;
    memcpy(Package->payload, myTCPpack, length);
  }

}